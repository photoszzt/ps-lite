// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_PS_LITE_MESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGE_PS_LITE_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace PS_Lite {
namespace Message {

struct FBNode;
struct FBNodeBuilder;

struct FBControl;
struct FBControlBuilder;

struct FBMeta;
struct FBMetaBuilder;

struct FBVal;
struct FBValBuilder;

enum FBRole {
  FBRole_SERVER = 0,
  FBRole_WORKER = 1,
  FBRole_SCHEDULER = 2,
  FBRole_MIN = FBRole_SERVER,
  FBRole_MAX = FBRole_SCHEDULER
};

inline const FBRole (&EnumValuesFBRole())[3] {
  static const FBRole values[] = {
    FBRole_SERVER,
    FBRole_WORKER,
    FBRole_SCHEDULER
  };
  return values;
}

inline const char * const *EnumNamesFBRole() {
  static const char * const names[4] = {
    "SERVER",
    "WORKER",
    "SCHEDULER",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBRole(FBRole e) {
  if (flatbuffers::IsOutRange(e, FBRole_SERVER, FBRole_SCHEDULER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBRole()[index];
}

enum FBCommand {
  FBCommand_EMPTY = 0,
  FBCommand_TERMINATE = 1,
  FBCommand_ADD_NODE = 2,
  FBCommand_BARRIER = 3,
  FBCommand_ACK = 4,
  FBCommand_HEARTBEAT = 5,
  FBCommand_MIN = FBCommand_EMPTY,
  FBCommand_MAX = FBCommand_HEARTBEAT
};

inline const FBCommand (&EnumValuesFBCommand())[6] {
  static const FBCommand values[] = {
    FBCommand_EMPTY,
    FBCommand_TERMINATE,
    FBCommand_ADD_NODE,
    FBCommand_BARRIER,
    FBCommand_ACK,
    FBCommand_HEARTBEAT
  };
  return values;
}

inline const char * const *EnumNamesFBCommand() {
  static const char * const names[7] = {
    "EMPTY",
    "TERMINATE",
    "ADD_NODE",
    "BARRIER",
    "ACK",
    "HEARTBEAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBCommand(FBCommand e) {
  if (flatbuffers::IsOutRange(e, FBCommand_EMPTY, FBCommand_HEARTBEAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBCommand()[index];
}

enum FBDataType {
  FBDataType_CHAR = 0,
  FBDataType_INT8 = 1,
  FBDataType_INT16 = 2,
  FBDataType_INT32 = 3,
  FBDataType_INT64 = 4,
  FBDataType_UINT8 = 5,
  FBDataType_UINT16 = 6,
  FBDataType_UINT32 = 7,
  FBDataType_UINT64 = 8,
  FBDataType_FLOAT = 9,
  FBDataType_DOUBLE = 10,
  FBDataType_OTHER = 11,
  FBDataType_MIN = FBDataType_CHAR,
  FBDataType_MAX = FBDataType_OTHER
};

inline const FBDataType (&EnumValuesFBDataType())[12] {
  static const FBDataType values[] = {
    FBDataType_CHAR,
    FBDataType_INT8,
    FBDataType_INT16,
    FBDataType_INT32,
    FBDataType_INT64,
    FBDataType_UINT8,
    FBDataType_UINT16,
    FBDataType_UINT32,
    FBDataType_UINT64,
    FBDataType_FLOAT,
    FBDataType_DOUBLE,
    FBDataType_OTHER
  };
  return values;
}

inline const char * const *EnumNamesFBDataType() {
  static const char * const names[13] = {
    "CHAR",
    "INT8",
    "INT16",
    "INT32",
    "INT64",
    "UINT8",
    "UINT16",
    "UINT32",
    "UINT64",
    "FLOAT",
    "DOUBLE",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameFBDataType(FBDataType e) {
  if (flatbuffers::IsOutRange(e, FBDataType_CHAR, FBDataType_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFBDataType()[index];
}

struct FBNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROLE = 4,
    VT_ID = 6,
    VT_CUSTOMER_ID = 8,
    VT_HOSTNAME = 10,
    VT_PORT = 12,
    VT_IS_RECOVERY = 14
  };
  PS_Lite::Message::FBRole role() const {
    return static_cast<PS_Lite::Message::FBRole>(GetField<uint8_t>(VT_ROLE, 0));
  }
  bool mutate_role(PS_Lite::Message::FBRole _role) {
    return SetField<uint8_t>(VT_ROLE, static_cast<uint8_t>(_role), 0);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool mutate_id(int32_t _id) {
    return SetField<int32_t>(VT_ID, _id, 0);
  }
  int32_t customer_id() const {
    return GetField<int32_t>(VT_CUSTOMER_ID, 0);
  }
  bool mutate_customer_id(int32_t _customer_id) {
    return SetField<int32_t>(VT_CUSTOMER_ID, _customer_id, 0);
  }
  const flatbuffers::String *hostname() const {
    return GetPointer<const flatbuffers::String *>(VT_HOSTNAME);
  }
  flatbuffers::String *mutable_hostname() {
    return GetPointer<flatbuffers::String *>(VT_HOSTNAME);
  }
  int32_t port() const {
    return GetField<int32_t>(VT_PORT, 0);
  }
  bool mutate_port(int32_t _port) {
    return SetField<int32_t>(VT_PORT, _port, 0);
  }
  bool is_recovery() const {
    return GetField<uint8_t>(VT_IS_RECOVERY, 0) != 0;
  }
  bool mutate_is_recovery(bool _is_recovery) {
    return SetField<uint8_t>(VT_IS_RECOVERY, static_cast<uint8_t>(_is_recovery), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ROLE) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_CUSTOMER_ID) &&
           VerifyOffset(verifier, VT_HOSTNAME) &&
           verifier.VerifyString(hostname()) &&
           VerifyField<int32_t>(verifier, VT_PORT) &&
           VerifyField<uint8_t>(verifier, VT_IS_RECOVERY) &&
           verifier.EndTable();
  }
};

struct FBNodeBuilder {
  typedef FBNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_role(PS_Lite::Message::FBRole role) {
    fbb_.AddElement<uint8_t>(FBNode::VT_ROLE, static_cast<uint8_t>(role), 0);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FBNode::VT_ID, id, 0);
  }
  void add_customer_id(int32_t customer_id) {
    fbb_.AddElement<int32_t>(FBNode::VT_CUSTOMER_ID, customer_id, 0);
  }
  void add_hostname(flatbuffers::Offset<flatbuffers::String> hostname) {
    fbb_.AddOffset(FBNode::VT_HOSTNAME, hostname);
  }
  void add_port(int32_t port) {
    fbb_.AddElement<int32_t>(FBNode::VT_PORT, port, 0);
  }
  void add_is_recovery(bool is_recovery) {
    fbb_.AddElement<uint8_t>(FBNode::VT_IS_RECOVERY, static_cast<uint8_t>(is_recovery), 0);
  }
  explicit FBNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBNodeBuilder &operator=(const FBNodeBuilder &);
  flatbuffers::Offset<FBNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBNode> CreateFBNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    PS_Lite::Message::FBRole role = PS_Lite::Message::FBRole_SERVER,
    int32_t id = 0,
    int32_t customer_id = 0,
    flatbuffers::Offset<flatbuffers::String> hostname = 0,
    int32_t port = 0,
    bool is_recovery = false) {
  FBNodeBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_hostname(hostname);
  builder_.add_customer_id(customer_id);
  builder_.add_id(id);
  builder_.add_is_recovery(is_recovery);
  builder_.add_role(role);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBNode> CreateFBNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    PS_Lite::Message::FBRole role = PS_Lite::Message::FBRole_SERVER,
    int32_t id = 0,
    int32_t customer_id = 0,
    const char *hostname = nullptr,
    int32_t port = 0,
    bool is_recovery = false) {
  auto hostname__ = hostname ? _fbb.CreateString(hostname) : 0;
  return PS_Lite::Message::CreateFBNode(
      _fbb,
      role,
      id,
      customer_id,
      hostname__,
      port,
      is_recovery);
}

struct FBControl FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CMD = 4,
    VT_NODE = 6,
    VT_BARRIER_GROUP = 8,
    VT_MSG_SIG = 10
  };
  PS_Lite::Message::FBCommand cmd() const {
    return static_cast<PS_Lite::Message::FBCommand>(GetField<uint8_t>(VT_CMD, 0));
  }
  bool mutate_cmd(PS_Lite::Message::FBCommand _cmd) {
    return SetField<uint8_t>(VT_CMD, static_cast<uint8_t>(_cmd), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>> *node() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>> *>(VT_NODE);
  }
  flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>> *mutable_node() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>> *>(VT_NODE);
  }
  int32_t barrier_group() const {
    return GetField<int32_t>(VT_BARRIER_GROUP, 0);
  }
  bool mutate_barrier_group(int32_t _barrier_group) {
    return SetField<int32_t>(VT_BARRIER_GROUP, _barrier_group, 0);
  }
  uint64_t msg_sig() const {
    return GetField<uint64_t>(VT_MSG_SIG, 0);
  }
  bool mutate_msg_sig(uint64_t _msg_sig) {
    return SetField<uint64_t>(VT_MSG_SIG, _msg_sig, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CMD) &&
           VerifyOffset(verifier, VT_NODE) &&
           verifier.VerifyVector(node()) &&
           verifier.VerifyVectorOfTables(node()) &&
           VerifyField<int32_t>(verifier, VT_BARRIER_GROUP) &&
           VerifyField<uint64_t>(verifier, VT_MSG_SIG) &&
           verifier.EndTable();
  }
};

struct FBControlBuilder {
  typedef FBControl Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(PS_Lite::Message::FBCommand cmd) {
    fbb_.AddElement<uint8_t>(FBControl::VT_CMD, static_cast<uint8_t>(cmd), 0);
  }
  void add_node(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>>> node) {
    fbb_.AddOffset(FBControl::VT_NODE, node);
  }
  void add_barrier_group(int32_t barrier_group) {
    fbb_.AddElement<int32_t>(FBControl::VT_BARRIER_GROUP, barrier_group, 0);
  }
  void add_msg_sig(uint64_t msg_sig) {
    fbb_.AddElement<uint64_t>(FBControl::VT_MSG_SIG, msg_sig, 0);
  }
  explicit FBControlBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBControlBuilder &operator=(const FBControlBuilder &);
  flatbuffers::Offset<FBControl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBControl>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBControl> CreateFBControl(
    flatbuffers::FlatBufferBuilder &_fbb,
    PS_Lite::Message::FBCommand cmd = PS_Lite::Message::FBCommand_EMPTY,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PS_Lite::Message::FBNode>>> node = 0,
    int32_t barrier_group = 0,
    uint64_t msg_sig = 0) {
  FBControlBuilder builder_(_fbb);
  builder_.add_msg_sig(msg_sig);
  builder_.add_barrier_group(barrier_group);
  builder_.add_node(node);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBControl> CreateFBControlDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    PS_Lite::Message::FBCommand cmd = PS_Lite::Message::FBCommand_EMPTY,
    const std::vector<flatbuffers::Offset<PS_Lite::Message::FBNode>> *node = nullptr,
    int32_t barrier_group = 0,
    uint64_t msg_sig = 0) {
  auto node__ = node ? _fbb.CreateVector<flatbuffers::Offset<PS_Lite::Message::FBNode>>(*node) : 0;
  return PS_Lite::Message::CreateFBControl(
      _fbb,
      cmd,
      node__,
      barrier_group,
      msg_sig);
}

struct FBMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBMetaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEAD = 4,
    VT_APP_ID = 6,
    VT_CUSTOMER_ID = 8,
    VT_TIMESTAMP = 10,
    VT_SENDER = 12,
    VT_RECVER = 14,
    VT_REQUEST = 16,
    VT_PUSH = 18,
    VT_PULL = 20,
    VT_SIMPLE_APP = 22,
    VT_BODY = 24,
    VT_DATA_TYPE = 26,
    VT_CONTROL = 28,
    VT_DATA_SIZE = 30,
    VT_PRIORITY = 32
  };
  int32_t head() const {
    return GetField<int32_t>(VT_HEAD, 0);
  }
  bool mutate_head(int32_t _head) {
    return SetField<int32_t>(VT_HEAD, _head, 0);
  }
  int32_t app_id() const {
    return GetField<int32_t>(VT_APP_ID, 0);
  }
  bool mutate_app_id(int32_t _app_id) {
    return SetField<int32_t>(VT_APP_ID, _app_id, 0);
  }
  int32_t customer_id() const {
    return GetField<int32_t>(VT_CUSTOMER_ID, 0);
  }
  bool mutate_customer_id(int32_t _customer_id) {
    return SetField<int32_t>(VT_CUSTOMER_ID, _customer_id, 0);
  }
  int32_t timestamp() const {
    return GetField<int32_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(int32_t _timestamp) {
    return SetField<int32_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  int32_t sender() const {
    return GetField<int32_t>(VT_SENDER, 0);
  }
  bool mutate_sender(int32_t _sender) {
    return SetField<int32_t>(VT_SENDER, _sender, 0);
  }
  int32_t recver() const {
    return GetField<int32_t>(VT_RECVER, 0);
  }
  bool mutate_recver(int32_t _recver) {
    return SetField<int32_t>(VT_RECVER, _recver, 0);
  }
  bool request() const {
    return GetField<uint8_t>(VT_REQUEST, 0) != 0;
  }
  bool mutate_request(bool _request) {
    return SetField<uint8_t>(VT_REQUEST, static_cast<uint8_t>(_request), 0);
  }
  bool push() const {
    return GetField<uint8_t>(VT_PUSH, 0) != 0;
  }
  bool mutate_push(bool _push) {
    return SetField<uint8_t>(VT_PUSH, static_cast<uint8_t>(_push), 0);
  }
  bool pull() const {
    return GetField<uint8_t>(VT_PULL, 0) != 0;
  }
  bool mutate_pull(bool _pull) {
    return SetField<uint8_t>(VT_PULL, static_cast<uint8_t>(_pull), 0);
  }
  bool simple_app() const {
    return GetField<uint8_t>(VT_SIMPLE_APP, 0) != 0;
  }
  bool mutate_simple_app(bool _simple_app) {
    return SetField<uint8_t>(VT_SIMPLE_APP, static_cast<uint8_t>(_simple_app), 0);
  }
  const flatbuffers::String *body() const {
    return GetPointer<const flatbuffers::String *>(VT_BODY);
  }
  flatbuffers::String *mutable_body() {
    return GetPointer<flatbuffers::String *>(VT_BODY);
  }
  const flatbuffers::Vector<uint16_t> *data_type() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DATA_TYPE);
  }
  flatbuffers::Vector<uint16_t> *mutable_data_type() {
    return GetPointer<flatbuffers::Vector<uint16_t> *>(VT_DATA_TYPE);
  }
  const PS_Lite::Message::FBControl *control() const {
    return GetPointer<const PS_Lite::Message::FBControl *>(VT_CONTROL);
  }
  PS_Lite::Message::FBControl *mutable_control() {
    return GetPointer<PS_Lite::Message::FBControl *>(VT_CONTROL);
  }
  int32_t data_size() const {
    return GetField<int32_t>(VT_DATA_SIZE, 0);
  }
  bool mutate_data_size(int32_t _data_size) {
    return SetField<int32_t>(VT_DATA_SIZE, _data_size, 0);
  }
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool mutate_priority(int32_t _priority) {
    return SetField<int32_t>(VT_PRIORITY, _priority, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HEAD) &&
           VerifyField<int32_t>(verifier, VT_APP_ID) &&
           VerifyField<int32_t>(verifier, VT_CUSTOMER_ID) &&
           VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<int32_t>(verifier, VT_SENDER) &&
           VerifyField<int32_t>(verifier, VT_RECVER) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST) &&
           VerifyField<uint8_t>(verifier, VT_PUSH) &&
           VerifyField<uint8_t>(verifier, VT_PULL) &&
           VerifyField<uint8_t>(verifier, VT_SIMPLE_APP) &&
           VerifyOffset(verifier, VT_BODY) &&
           verifier.VerifyString(body()) &&
           VerifyOffset(verifier, VT_DATA_TYPE) &&
           verifier.VerifyVector(data_type()) &&
           VerifyOffset(verifier, VT_CONTROL) &&
           verifier.VerifyTable(control()) &&
           VerifyField<int32_t>(verifier, VT_DATA_SIZE) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY) &&
           verifier.EndTable();
  }
};

struct FBMetaBuilder {
  typedef FBMeta Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_head(int32_t head) {
    fbb_.AddElement<int32_t>(FBMeta::VT_HEAD, head, 0);
  }
  void add_app_id(int32_t app_id) {
    fbb_.AddElement<int32_t>(FBMeta::VT_APP_ID, app_id, 0);
  }
  void add_customer_id(int32_t customer_id) {
    fbb_.AddElement<int32_t>(FBMeta::VT_CUSTOMER_ID, customer_id, 0);
  }
  void add_timestamp(int32_t timestamp) {
    fbb_.AddElement<int32_t>(FBMeta::VT_TIMESTAMP, timestamp, 0);
  }
  void add_sender(int32_t sender) {
    fbb_.AddElement<int32_t>(FBMeta::VT_SENDER, sender, 0);
  }
  void add_recver(int32_t recver) {
    fbb_.AddElement<int32_t>(FBMeta::VT_RECVER, recver, 0);
  }
  void add_request(bool request) {
    fbb_.AddElement<uint8_t>(FBMeta::VT_REQUEST, static_cast<uint8_t>(request), 0);
  }
  void add_push(bool push) {
    fbb_.AddElement<uint8_t>(FBMeta::VT_PUSH, static_cast<uint8_t>(push), 0);
  }
  void add_pull(bool pull) {
    fbb_.AddElement<uint8_t>(FBMeta::VT_PULL, static_cast<uint8_t>(pull), 0);
  }
  void add_simple_app(bool simple_app) {
    fbb_.AddElement<uint8_t>(FBMeta::VT_SIMPLE_APP, static_cast<uint8_t>(simple_app), 0);
  }
  void add_body(flatbuffers::Offset<flatbuffers::String> body) {
    fbb_.AddOffset(FBMeta::VT_BODY, body);
  }
  void add_data_type(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data_type) {
    fbb_.AddOffset(FBMeta::VT_DATA_TYPE, data_type);
  }
  void add_control(flatbuffers::Offset<PS_Lite::Message::FBControl> control) {
    fbb_.AddOffset(FBMeta::VT_CONTROL, control);
  }
  void add_data_size(int32_t data_size) {
    fbb_.AddElement<int32_t>(FBMeta::VT_DATA_SIZE, data_size, 0);
  }
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(FBMeta::VT_PRIORITY, priority, 0);
  }
  explicit FBMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBMetaBuilder &operator=(const FBMetaBuilder &);
  flatbuffers::Offset<FBMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBMeta> CreateFBMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t head = 0,
    int32_t app_id = 0,
    int32_t customer_id = 0,
    int32_t timestamp = 0,
    int32_t sender = 0,
    int32_t recver = 0,
    bool request = false,
    bool push = false,
    bool pull = false,
    bool simple_app = false,
    flatbuffers::Offset<flatbuffers::String> body = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data_type = 0,
    flatbuffers::Offset<PS_Lite::Message::FBControl> control = 0,
    int32_t data_size = 0,
    int32_t priority = 0) {
  FBMetaBuilder builder_(_fbb);
  builder_.add_priority(priority);
  builder_.add_data_size(data_size);
  builder_.add_control(control);
  builder_.add_data_type(data_type);
  builder_.add_body(body);
  builder_.add_recver(recver);
  builder_.add_sender(sender);
  builder_.add_timestamp(timestamp);
  builder_.add_customer_id(customer_id);
  builder_.add_app_id(app_id);
  builder_.add_head(head);
  builder_.add_simple_app(simple_app);
  builder_.add_pull(pull);
  builder_.add_push(push);
  builder_.add_request(request);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBMeta> CreateFBMetaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t head = 0,
    int32_t app_id = 0,
    int32_t customer_id = 0,
    int32_t timestamp = 0,
    int32_t sender = 0,
    int32_t recver = 0,
    bool request = false,
    bool push = false,
    bool pull = false,
    bool simple_app = false,
    const char *body = nullptr,
    const std::vector<uint16_t> *data_type = nullptr,
    flatbuffers::Offset<PS_Lite::Message::FBControl> control = 0,
    int32_t data_size = 0,
    int32_t priority = 0) {
  auto body__ = body ? _fbb.CreateString(body) : 0;
  auto data_type__ = data_type ? _fbb.CreateVector<uint16_t>(*data_type) : 0;
  return PS_Lite::Message::CreateFBMeta(
      _fbb,
      head,
      app_id,
      customer_id,
      timestamp,
      sender,
      recver,
      request,
      push,
      pull,
      simple_app,
      body__,
      data_type__,
      control,
      data_size,
      priority);
}

struct FBVal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FBValBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_META = 4,
    VT_VALUE = 6
  };
  const PS_Lite::Message::FBMeta *meta() const {
    return GetPointer<const PS_Lite::Message::FBMeta *>(VT_META);
  }
  PS_Lite::Message::FBMeta *mutable_meta() {
    return GetPointer<PS_Lite::Message::FBMeta *>(VT_META);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_VALUE);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_value() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_META) &&
           verifier.VerifyTable(meta()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.VerifyVectorOfStrings(value()) &&
           verifier.EndTable();
  }
};

struct FBValBuilder {
  typedef FBVal Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_meta(flatbuffers::Offset<PS_Lite::Message::FBMeta> meta) {
    fbb_.AddOffset(FBVal::VT_META, meta);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value) {
    fbb_.AddOffset(FBVal::VT_VALUE, value);
  }
  explicit FBValBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBValBuilder &operator=(const FBValBuilder &);
  flatbuffers::Offset<FBVal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBVal>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBVal> CreateFBVal(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<PS_Lite::Message::FBMeta> meta = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value = 0) {
  FBValBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_meta(meta);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBVal> CreateFBValDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<PS_Lite::Message::FBMeta> meta = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*value) : 0;
  return PS_Lite::Message::CreateFBVal(
      _fbb,
      meta,
      value__);
}

}  // namespace Message
}  // namespace PS_Lite

#endif  // FLATBUFFERS_GENERATED_MESSAGE_PS_LITE_MESSAGE_H_
